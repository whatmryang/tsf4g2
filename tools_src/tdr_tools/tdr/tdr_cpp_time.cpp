#include "tdr_cpp.h"
#include <iostream>
#include <string>

using std::cout;
using std::endl;
using std::string;

const char*
TTransCPP::timeHead[] = {
    "class TdrTime",
    "{",
    "    private:",
    "        int16_t nHour;",
    "        uint8_t bMin;",
    "        uint8_t bSec;",
    "",
    "    public:",
    "        TdrTime(struct tm& src)",
    "        {",
    "            nHour = (short)src.tm_hour;",
    "            bMin = (unsigned char)src.tm_min;",
    "            bSec = (unsigned char)src.tm_sec;",
    "        }",
    "",
    "        TdrTime(tdr_time_t src)",
    "        {",
    "            nHour = *(int16_t*)(char*)&src;",
    "            bMin = *(uint8_t*)((char*)&src + 2);",
    "            bSec = *(uint8_t*)((char*)&src + 3);",
    "        }",
    "",
    "        void toTm(struct tm& dest) const",
    "        {",
    "            dest.tm_hour = nHour;",
    "            dest.tm_min  = bMin;",
    "            dest.tm_sec  = bSec;",
    "        }",
    "",
    "        operator tdr_time_t () const",
    "        {",
    "            tdr_time_t ret;",
    "",
    "            *(int16_t*)(char*)&ret = nHour;",
    "            *(uint8_t*)((char*)&ret + 2) = bMin;",
    "            *(uint8_t*)((char*)&ret + 3) = bSec;",
    "",
    "            return ret;",
    "        }",
    "",
    "        TdrError::ErrorType print2Buf(TdrWriteBuf& dest) const",
    "        {",
    "            return dest.textize(\"%3d:%02d:%02d\", nHour, bMin, bSec);",
    "        }",
    "",
    "        bool operator < (const TdrTime& right) const",
    "        {",
    "            if (this->nHour > right.nHour)",
    "            {",
    "                return false;",
    "            } else if (this->nHour < right.nHour)",
    "            {",
    "                return true;",
    "            }",
    "",
    "            if (this->bMin > right.bMin)",
    "            {",
    "                return false;",
    "            } else if (this->bMin < right.bMin)",
    "            {",
    "                return true;",
    "            }",
    "",
    "            if (this->bSec > right.bSec)",
    "            {",
    "                return false;",
    "            } else if (this->bSec < right.bSec)",
    "            {",
    "                return true;",
    "            }",
    "",
    "            return false;",
    "        }",
    "",
    "        bool isValid() const",
    "        {",
    "            if ((-999 > nHour) || (999 < nHour))",
    "            {",
    "                return false;",
    "            }",
    "",
    "            if ((59 < bMin))",
    "            {",
    "                return false;",
    "            }",
    "",
    "            if ((59 < bSec))",
    "            {",
    "                return false;",
    "            }",
    "",
    "            return true;",
    "        }",
    "};",
    "",
    "class TdrDate",
    "{",
    "    private:",
    "        int16_t nYear;",
    "        uint8_t bMon;",
    "        uint8_t bDay;",
    "",
    "    public:",
    "        TdrDate(struct tm& src)",
    "        {",
    "            nYear = (short)(src.tm_year + 1900);",
    "            bMon = (unsigned char)src.tm_mon + 1;",
    "            bDay = (unsigned char)src.tm_mday;",
    "        }",
    "",
    "        TdrDate(tdr_date_t src)",
    "        {",
    "            nYear = *(int16_t*)(char*)&src;",
    "            bMon = *(uint8_t*)((char*)&src + 2);",
    "            bDay = *(uint8_t*)((char*)&src + 3);",
    "        }",
    "",
    "        void toTm(struct tm& dest) const",
    "        {",
    "            dest.tm_year = nYear - 1900;",
    "            dest.tm_mon  = bMon - 1;",
    "            dest.tm_mday = bDay;",
    "        }",
    "",
    "        operator tdr_date_t () const",
    "        {",
    "            tdr_date_t ret;",
    "",
    "            *(int16_t*)(char*)&ret = nYear;",
    "            *(uint8_t*)((char*)&ret + 2) = bMon;",
    "            *(uint8_t*)((char*)&ret + 3) = bDay;",
    "",
    "            return ret;",
    "        }",
    "",
    "        TdrError::ErrorType print2Buf(TdrWriteBuf& dest) const",
    "        {",
    "            return dest.textize(\"%4d-%02d-%02d\", nYear, bMon, bDay);",
    "        }",
    "",
    "        bool operator < (const TdrDate& right) const",
    "        {",
    "            if (this->nYear > right.nYear)",
    "            {",
    "                return false;",
    "            } else if (this->nYear < right.nYear)",
    "            {",
    "                return true;",
    "            }",
    "",
    "            if (this->bMon > right.bMon)",
    "            {",
    "                return false;",
    "            } else if (this->bMon < right.bMon)",
    "            {",
    "                return true;",
    "            }",
    "",
    "            if (this->bDay > right.bDay)",
    "            {",
    "                return false;",
    "            } else if (this->bDay < right.bDay)",
    "            {",
    "                return true;",
    "            }",
    "",
    "            return false;",
    "        }",
    "",
    "        bool isValid() const;",
    "};",
    "",
    "class TdrDateTime",
    "{",
    "    private:",
    "        TdrDate tdrDate;",
    "        TdrTime tdrTime;",
    "",
    "    public:",
    "        TdrDateTime(struct tm& src) : tdrDate(src), tdrTime(src) {}",
    "",
    "        TdrDateTime(tdr_datetime_t src)",
    "            : tdrDate(*(tdr_date_t*)&src), tdrTime(*(tdr_time_t*)((char*)&src + 4)) {}",
    "",
    "        operator tdr_datetime_t () const",
    "        {",
    "            tdr_datetime_t ret;",
    "",
    "            *(tdr_date_t*)&ret = tdrDate;",
    "            *(tdr_time_t*)((char*)&ret + 4) = tdrTime;",
    "",
    "            return ret;",
    "        }",
    "",
    "        void toTm(struct tm& dest) const",
    "        {",
    "            tdrDate.toTm(dest);",
    "            tdrTime.toTm(dest);",
    "        }",
    "",
    "        TdrError::ErrorType print2Buf(TdrWriteBuf& dest) const",
    "        {",
    "            TdrError::ErrorType ret = TdrError::TDR_NO_ERROR;",
    "",
    "            ret = tdrDate.print2Buf(dest);",
    "",
    "            if (TdrError::TDR_NO_ERROR == ret)",
    "            {",
    "                ret = dest.writeChar(' ');",
    "            }",
    "",
    "            if (TdrError::TDR_NO_ERROR == ret)",
    "            {",
    "                ret = tdrTime.print2Buf(dest);",
    "            }",
    "",
    "            return ret;",
    "        }",
    "",
    "",
    "        bool operator < (const TdrDateTime& right) const",
    "        {",
    "            if (this->tdrDate < right.tdrDate)",
    "            {",
    "                return true;",
    "            } else if (right.tdrDate < this->tdrDate)",
    "            {",
    "                return false;",
    "            }",
    "",
    "            if (this->tdrTime < right.tdrTime)",
    "            {",
    "                return true;",
    "            } else if (right.tdrTime < this->tdrTime)",
    "            {",
    "                return false;",
    "            }",
    "",
    "            return false;",
    "        }",
    "",
    "        bool isValid() const",
    "        {",
    "            return tdrDate.isValid() && tdrTime.isValid();",
    "        }",
    "};",
};

const char*
TTransCPP::timeCpp[] = {
    "bool TdrDate::isValid() const",
    "{",
    "    if ((-9999 > nYear) || (nYear > 9999))",
    "    {",
    "        return false;",
    "    }",
    "",
    "    if (12 < bMon)",
    "    {",
    "        return false;",
    "    }",
    "",
    "    if (31 < bDay)",
    "    {",
    "        return false;",
    "    }",
    "    switch(bMon)",
    "    {",
    "        case 2:",
    "            {",
    "                if ((nYear % 4) == 0 && ((nYear % 100) != 0 || (nYear % 400) == 0))",
    "                {",
    "                    if (29 < bDay)",
    "                    {",
    "                        return false;",
    "                    }",
    "                } else",
    "                {",
    "                    if (28 < bDay)",
    "                    {",
    "                        return false;",
    "                    }",
    "                }",
    "                break;",
    "            }",
    "        case 4:",
    "        case 6:",
    "        case 9:",
    "        case 11:",
    "            {",
    "                if (30 < bDay)",
    "                {",
    "                    return false;",
    "                }",
    "                break;",
    "            }",
    "        default:",
    "            break;",
    "    }",
    "",
    "    return true;",
    "}",
};

void
TTransCPP::makeTdrTime()
{
    DEFINE_CONTAINER();

    APPEND_CONTAINER_HEAD("#ifndef _TDR_TIME_H_");
    APPEND_CONTAINER_HEAD("#define _TDR_TIME_H_");
    APPEND_CONTAINER_HEAD("");
    APPEND_CONTAINER_HEAD("#include \"TdrPal.h\"");
    APPEND_CONTAINER_HEAD("#include \"TdrBuf.h\"");
    APPEND_CONTAINER_HEAD("#include \"TdrError.h\"");
    APPEND_CONTAINER_HEAD("");

    APPEND_CONTAINER_CPP("");
    APPEND_CONTAINER_CPP("#include \"TdrTime.h\"");
    APPEND_CONTAINER_CPP("");

    APPEND_CONTAINER("namespace tsf4g_tdr");
    APPEND_CONTAINER("{");
    APPEND_CONTAINER("");
    APPEND_CONTAINER("");
    {
        loadCodeRes(0, headLines, timeHead, sizeof(TTransCPP::timeHead)/sizeof(TTransCPP::timeHead[0]));
        loadCodeRes(0, cppLines, timeCpp, sizeof(TTransCPP::timeCpp)/sizeof(TTransCPP::timeCpp[0]));
    }
    APPEND_CONTAINER("");
    APPEND_CONTAINER("}");

    APPEND_CONTAINER_HEAD("#endif");

    OUTPUT_CONTAINER_NOMETA(string("TdrTime.h"), string("TdrTime.cpp"));
}
