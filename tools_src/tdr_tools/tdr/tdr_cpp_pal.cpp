#include "tdr_cpp.h"
#include <iostream>
#include <string>

using std::cout;
using std::endl;
using std::string;

const char*
TTransCPP::palHead[] = {
    "#include <stddef.h>",
    "#include <time.h>",
    "#include <sys/types.h>",
    "",
    "#if defined(_WIN32) || defined(_WIN64)",
    "    #include <tchar.h>",
    "    #include <winsock2.h>",
    "",
    "    #if _WIN32_WINNT >= 0x0400",
    "        #include <windows.h>",
    "    #else",
    "        #include <windows.h>",
    "        #include <Ws2tcpip.h>",
    "    #endif",
    "",
    "    #pragma comment(lib, \"Ws2_32.lib\")",
    "#else",
    "    #include <unistd.h>",
    "    #include <endian.h>",
    "",
    "    #include <stdint.h>",
    "    #include <inttypes.h>",
    "",
    "    #include <sys/socket.h>",
    "    #include <netinet/in.h>",
    "    #include <arpa/inet.h>",
    "#endif",
    "",
    "#ifndef TDR_CUSTOM_C_TYPES",
    "#define TDR_CUSTOM_C_TYPES",
    "    #if defined(_WIN32) || defined(_WIN64)",
    "        typedef  signed char  int8_t;",
    "        typedef  short int16_t;",
    "        typedef  int   int32_t;",
    "        typedef unsigned char  uint8_t;",
    "        typedef unsigned short uint16_t;",
    "        typedef unsigned int   uint32_t;",
    "        #if _MSC_VER >= 1300",
    "            typedef unsigned long long uint64_t;",
    "            typedef long long int64_t;",
    "        #else",
    "            typedef unsigned __int64 uint64_t;",
    "            typedef __int64 int64_t;",
    "        #endif",
    "    #endif",
    "",
    "typedef int64_t tdr_longlong;",
    "typedef uint64_t tdr_ulonglong;",
    "typedef uint16_t tdr_wchar_t;",
    "typedef uint32_t tdr_date_t;",
    "typedef uint32_t tdr_time_t;",
    "typedef uint64_t tdr_datetime_t;",
    "typedef uint32_t tdr_ip_t;",
    "",
    "#endif",
    "",
    "#if defined(_WIN32) || defined(_WIN64)",
    "    #if defined (LITTLEENDIAN) && (LITTLEENDIAN > 0)",
    "        #define TDR_CPP_OS_LITTLEENDIAN",
    "        #if defined (TDR_CPP_OS_BIGENDIAN)",
    "            #undef TDR_CPP_OS_BIGENDIAN",
    "        #endif",
    "    #else",
    "        #define TDR_CPP_OS_BIGENDIAN",
    "        #if defined (TOS_LITTLEENDIAN)",
    "            #undef TDR_CPP_OS_LITTLEENDIAN",
    "        #endif",
    "    #endif",
    "#else",
    "    #if __BYTE_ORDER == __LITTLE_ENDIAN",
    "        #define TDR_CPP_OS_LITTLEENDIAN",
    "",
    "        #if defined (TDR_CPP_OS_BIGENDIAN)",
    "            #undef TDR_CPP_OS_BIGENDIAN",
    "        #endif",
    "    #else",
    "        #define TDR_CPP_OS_BIGENDIAN",
    "        #if defined (TDR_CPP_OS_LITTLEENDIAN)",
    "            #undef TDR_CPP_OS_LITTLEENDIAN",
    "        #endif",
    "    #endif",
    "#endif",
    "",
    "#if (defined(_WIN32) || defined(_WIN64)) &&  _MSC_VER < 1300",
    "    #define TDR_CPP_OS_SWAP64(x) \\",
    "        ((((x) & (uint64_t)0xff00000000000000) >> 56)    \\",
    "         | (((x) & (uint64_t)0x00ff000000000000) >> 40)  \\",
    "         | (((x) & (uint64_t)0x0000ff0000000000) >> 24)  \\",
    "         | (((x) & (uint64_t)0x000000ff00000000) >> 8)   \\",
    "         | (((x) & (uint64_t)0x00000000ff000000) << 8)   \\",
    "         | (((x) & (uint64_t)0x0000000000ff0000) << 24)  \\",
    "         | (((x) & (uint64_t)0x000000000000ff00) << 40)  \\",
    "         | (((x) & (uint64_t)0x00000000000000ff) << 56))",
    "#else",
    "    #define TDR_CPP_OS_SWAP64(x) \\",
    "        ((((x) & (uint64_t)0xff00000000000000LL) >> 56)   \\",
    "         | (((x) & (uint64_t)0x00ff000000000000LL) >> 40) \\",
    "         | (((x) & (uint64_t)0x0000ff0000000000LL) >> 24) \\",
    "         | (((x) & (uint64_t)0x000000ff00000000LL) >> 8)  \\",
    "         | (((x) & (uint64_t)0x00000000ff000000) << 8)    \\",
    "         | (((x) & (uint64_t)0x0000000000ff0000) << 24)   \\",
    "         | (((x) & (uint64_t)0x000000000000ff00) << 40)   \\",
    "         | (((x) & (uint64_t)0x00000000000000ff) << 56))",
    "#endif /*#if (defined(_WIN32) || defined(_WIN64)) &&  _MSC_VER < 1300*/",
    "",
    "#define TDR_CPP_OS_SWAP32(x) \\",
    "    ((((x) & 0xff000000) >> 24)  \\",
    "     | (((x) & 0x00ff0000) >> 8) \\",
    "     | (((x) & 0x0000ff00) << 8) \\",
    "     | (((x) & 0x000000ff) << 24))",
    "",
    "#define TDR_CPP_OS_SWAP16(x) \\",
    "    ((((x) & 0xff00) >> 8)  \\",
    "     | (((x) & 0x00ff) << 8))",
    "",
    "#ifdef TDR_CPP_OS_LITTLEENDIAN",
    "    #define tdr_cpp_ntoh64(x)    TDR_CPP_OS_SWAP64(x)",
    "    #define tdr_cpp_hton64(x)    TDR_CPP_OS_SWAP64(x)",
    "    #define tdr_cpp_ntoh32(x)    TDR_CPP_OS_SWAP32(x)",
    "    #define tdr_cpp_hton32(x)    TDR_CPP_OS_SWAP32(x)",
    "    #define tdr_cpp_ntoh16(x)    TDR_CPP_OS_SWAP16(x)",
    "    #define tdr_cpp_hton16(x)    TDR_CPP_OS_SWAP16(x)",
    "#else",
    "    #define tdr_cpp_ntoh64(x)    (x)",
    "    #define tdr_cpp_hton64(x)    (x)",
    "    #define tdr_cpp_ntoh32(x)    (x)",
    "    #define tdr_cpp_hton32(x)    (x)",
    "    #define tdr_cpp_ntoh16(x)    (x)",
    "    #define tdr_cpp_hton16(x)    (x)",
    "#endif",
    "",
    "#if defined(_WIN32) || defined(_WIN64)",
    "    #define tdr_cpp_snprintf  _snprintf",
    "    #define tdr_cpp_vsnprintf  _vsnprintf",
    "#else",
    "    #define tdr_cpp_snprintf  snprintf",
    "    #define tdr_cpp_vsnprintf  vsnprintf",
    "#endif",
    "",
    "#if (defined(_WIN32) || defined(_WIN64)) && _MSC_VER < 1400",
    "    #define TDR_CPP_INT64_FORMAT \"%I64i\"",
    "    #define TDR_CPP_UINT64_FORMAT \"%I64u\"",
    "    #define TDR_CPP_UINT64HEX_FORMAT \"0x%016I64x\"",
    "#else",
    "    #define TDR_CPP_INT64_FORMAT \"%lld\"",
    "    #define TDR_CPP_UINT64_FORMAT \"%llu\"",
    "    #define TDR_CPP_UINT64HEX_FORMAT \"0x%016llx\"",
    "#endif",
    "",
    "#ifdef TSF4G_TDR_DEBUG",
    "#define TSF4G_TDR_DEBUG_TRACE()\\",
    "    printf(\"TSF4G_TDR_TRACE... %s:%d\\n\", __FILE__, __LINE__);",
    "#else",
    "#define TSF4G_TDR_DEBUG_TRACE()",
    "#endif",
};

void
TTransCPP::makeTdrPal()
{
    DEFINE_CONTAINER_HEAD();

    APPEND_CONTAINER_HEAD("#ifndef _TDR_PAL_H_");
    APPEND_CONTAINER_HEAD("#define _TDR_PAL_H_");
    APPEND_CONTAINER_HEAD("");

    loadCodeRes(0, headLines, palHead, sizeof(TTransCPP::palHead)/sizeof(TTransCPP::palHead[0]));

    APPEND_CONTAINER_HEAD("");
    APPEND_CONTAINER_HEAD("#endif");

    OUTPUT_CONTAINER_HEAD_NOMETA(string("TdrPal.h"));
}
