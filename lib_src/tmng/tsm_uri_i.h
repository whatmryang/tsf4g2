#ifndef _TSM_URI_I_H_
#define _TSM_URI_I_H_
//============================================================================
// @Id:       $Id: tsm_uri_i.h 13810 2010-09-26 03:24:17Z tomaswang $
// @Author:   $Author: tomaswang $
// @Date:     $Date:: 2010-09-26 11:24:17 +0800 #$
// @Revision: $Revision: 13810 $
// @HeadURL:  $HeadURL:: https://tc-svn.tencent.com/ied/ied_tsf4g_rep/tsf4g_#$
//----------------------------------------------------------------------------


#include "tsm_info.h"


//----------------------------------------------------------------------------
//
//----------------------------------------------------------------------------
typedef struct
{
    int           iType;
    int           iSync;
    char          szUri[URI_MAX_LEN];
    union {
        TsmTdrMetaInfo m;
        TsmTdrDataInfo d;
    } s;
} TsmUri;

#define TSM_URI_GET(P, T, N) (tsm_uri_sync(P), (P)->s.T.N)


//============================================================================
//  APIs
//----------------------------------------------------------------------------
//  同步一个 a_pszUri
//      a_pstUri        待同步的 TsmUri 结构
//  成功返回 0
//  失败返回负数
//      -1              a_pszUri为空
//      -2              协议解析出错
//      -3              待分析的Uri 太长了
//  PS: 这个结果可能会破坏 a_pstUri 中已有的数据
//----------------------------------------------------------------------------
int tsm_uri_sync(TsmUri *a_pstUri);

//----------------------------------------------------------------------------
//  Uri 结构生成
//      a_pstUri        待生成的 Uri结构
//      a_iSeg          要设置的串是第几段，0 代表 Uri整体
//      a_pszValue      变量串
//  成功返回 0
//  失败返回
//      -1              a_pstUri为空
//      -2              对于 a_iSeg == 0  时，Uri 格式错误
//      -3              a_iSeg  越界或者 a_iSeg 对应段为初始化
//      -4              
//----------------------------------------------------------------------------
int tsm_uri_set(TsmUri     *a_pstUri,
                const char *a_pszUri);

int tsm_uri_set_meta(TsmUri         *a_pstUri,
                     TsmTdrMetaInfo *a_pstMeta);

int tsm_uri_set_data(TsmUri         *a_pstUri,
                     TsmTdrDataInfo *a_pstData);

int tsm_uri_is_null(TsmUri *a_pstUri);

//----------------------------------------------------------------------------
//  Uri 串获得
//      a_pstUri        Uri 结构
//      a_iSeg          希望获得的串是第几段，0 代表 Uri整体
//  成功返回 Uri串
//      注意，返回的串是 [/:\0] 三种字符都代表结尾
//  失败返回空串，并填充缺省的错误栈
//----------------------------------------------------------------------------
const char *tsm_uri_get(TsmUri *a_pstUri);

//----------------------------------------------------------------------------
//  标准化一个 Uri
//      a_pstStd        标准的 Uri结构
//      a_pszUri        原始的 Uri结构
//  成功返回 0
//  失败返回
//      -1              a_pstUri为空
//----------------------------------------------------------------------------
int tsm_uri_std_i(TsmUri *a_pstStd,
                  TsmUri *a_pstUri);

//----------------------------------------------------------------------------
//  比较两个 Uri结构
//  成功返回 0
//----------------------------------------------------------------------------
int tsm_uri_compare(TsmUri *a_pstUri1,
                    TsmUri *a_pstUri2);


//----------------------------------------------------------------------------
// THE END
//============================================================================
#endif
