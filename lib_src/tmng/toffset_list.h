#ifndef _TOFFSET_LIST_H_
#define _TOFFSET_LIST_H_
//============================================================================
// @Id:       $Id: toffset_list.h 10522 2010-07-20 02:22:08Z tomaswang $
// @Author:   $Author: tomaswang $
// @Date:     $Date:: 2010-07-20 10:22:08 +0800 #$
// @Revision: $Revision: 10522 $
// @HeadURL:  $HeadURL:: https://tc-svn.tencent.com/ied/ied_tsf4g_rep/tsf4g_#$
//----------------------------------------------------------------------------


#include <sys/types.h>


//----------------------------------------------------------------------------
// 节点结构
//----------------------------------------------------------------------------

typedef struct
{
    size_t prev;
    size_t next;
} OffsetList;


//----------------------------------------------------------------------------
// 一些操作宏，其中参数
//     B 基地址
//     P 指针
//     O 偏移量
//     H 头节点的偏移量
//     N 待操作节点的偏移量
//----------------------------------------------------------------------------
// 指针与偏移量转换
//----------------------------------------------------------------------------
#define PTR2OFF(P, B) ((char *)(P) - (char *)(B))
#define OFF2PTR(O, B) ((void *)((char *)(B) + (O)))

#define MOFFSET(S, T) PTR2OFF(&((T *)(0))->S, 0)
//----------------------------------------------------------------------------
// 链表头节点初始化
//----------------------------------------------------------------------------
#define offset_list_init(H, B) \
    do \
    { \
        OffsetList *head = (OffsetList *)OFF2PTR((H), (B)); \
        \
        head->prev = (H); \
        head->next = (H); \
    } \
    while (0)

//----------------------------------------------------------------------------
// 测试节点是否为空节点
//----------------------------------------------------------------------------
#define offset_list_is_null(H, B) ( \
    (H) == ((OffsetList *)OFF2PTR((H), (B)))->prev && \
    (H) == ((OffsetList *)OFF2PTR((H), (B)))->next \
)

//----------------------------------------------------------------------------
// 在链表中添加一个节点
//----------------------------------------------------------------------------
#define offset_list_add(N, H, B) \
    do \
    { \
        OffsetList *head = (OffsetList *)OFF2PTR((H), (B)); \
        OffsetList *node = (OffsetList *)OFF2PTR((N), (B)); \
        \
        ((OffsetList *)OFF2PTR(head->next, (B)))->prev = (N); \
        node->next = head->next; \
        node->prev = (H); \
        head->next = (N); \
    } \
    while (0)

//----------------------------------------------------------------------------
// 在链表中删除一个节点
//----------------------------------------------------------------------------
#define offset_list_del(N, B) \
    do \
    { \
        OffsetList *node = (OffsetList *)OFF2PTR((N), (B)); \
        \
        ((OffsetList *)OFF2PTR(node->prev, (B)))->next = node->next; \
        ((OffsetList *)OFF2PTR(node->next, (B)))->prev = node->prev; \
        \
        offset_list_init((N), (B)); \
    } \
    while (0)

//----------------------------------------------------------------------------
// 找到节点对应的结构
//----------------------------------------------------------------------------
#define offset_list_entry(M, T, N, B) \
    ((T *)((char *)OFF2PTR((N), (B)) - (char *)(&(((T *)0)->M))))


//----------------------------------------------------------------------------
// THE END
//============================================================================
#endif
