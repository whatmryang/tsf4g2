#ifndef _TOFFSET_ARRAY_H_
#define _TOFFSET_ARRAY_H_
//============================================================================
// @Id:       $Id: toffset_array.h 10522 2010-07-20 02:22:08Z tomaswang $
// @Author:   $Author: tomaswang $
// @Date:     $Date:: 2010-07-20 10:22:08 +0800 #$
// @Revision: $Revision: 10522 $
// @HeadURL:  $HeadURL:: https://tc-svn.tencent.com/ied/ied_tsf4g_rep/tsf4g_#$
//----------------------------------------------------------------------------


#include "toffset_list.h"


//----------------------------------------------------------------------------
// 数组管理结构
//----------------------------------------------------------------------------
typedef struct {
    size_t     iBegin;      // 数组的开始地址偏移
    size_t     iEnd;        // 数组的结尾地址偏移
    int        iMaxHash;    // 每个条目需要建立哈希结点数
    size_t     iSize;       // 每个条目所使用的字节数
    int        iMaxCap;     // 数组中最多能容纳的条目数量
    int        iCurCap;     // 数组中当前已经使用的条目数量
    OffsetList stHeadFree;  // 未使用过的节点链表头
    OffsetList stHeadUsed;  // 已使用过的节点链表头
} OffsetArray;


//============================================================================
// APIS
//----------------------------------------------------------------------------
//  通过数组的条目尺寸和容量，计算数组数据区所需要的空间
//----------------------------------------------------------------------------
size_t toffset_array_size(size_t a_iSize, int a_iMaxCap);

//----------------------------------------------------------------------------
//  初始化一个 OffsetArray  管理的结构
//      a_pBase     基地址
//      a_iArray    数组管理结构所在偏移
//      a_iBegin    数组起始偏移
//      a_iSize     数组中条目尺寸
//      a_iMaxCap   数组的最大容量，为 0时使用最大容量
//      a_iMaxHash  每个条目需要建立哈希结点数
//  成功返回 0
//  失败返回负数
//      -1          a_pBase 为空
//      -2          a_pBase 为 -1
//      -3          a_iMaxCap 小于零
//      -4          a_iArray所在区域与 [a_iBegin, ...) 有重合
//----------------------------------------------------------------------------
int toffset_array_init(void   *a_pBase,
                       size_t  a_iArray,
                       size_t  a_iBegin,
                       size_t  a_iSize,
                       int     a_iMaxCap,
                       int     a_iMaxHash);

//----------------------------------------------------------------------------
//  检查 OffsetArray  是否还有空闲节点可以分配
//      a_pBase     基地址
//      a_iArray    数组管理结构所在偏移
//  返回 Capaticy - Used
//----------------------------------------------------------------------------
int toffset_array_stat(void *a_pBase, size_t a_iArray);

//----------------------------------------------------------------------------
//  分配一个空闲节点
//      a_pBase     基地址
//      a_iArray    数组管理结构所在偏移
//  成功返回新节点偏移
//  失败返回 0
//----------------------------------------------------------------------------
size_t toffset_array_alloc(void *a_pBase, size_t a_iArray);

//----------------------------------------------------------------------------
//  释放一个以前分配的节点
//      a_pBase     基地址
//      a_iArray    数组管理结构所在偏移
//      a_iNode     待释放的节点偏移
//  成功返回 0
//  失败返回负数
//----------------------------------------------------------------------------
int toffset_array_free(void *a_pBase, size_t a_iArray, size_t a_iNode);

//----------------------------------------------------------------------------
//  通过数组索引取得数据偏移
//      a_pBase     基地址
//      a_iArray    数组管理结构所在偏移
//      a_iIndex    数组索引
//  失败返回
//      0           偏移越界
//  否则返回
//      >0          数据偏移
//----------------------------------------------------------------------------
size_t toffset_array_offset(void *a_pBase, size_t a_iArray, int a_iIndex);

//----------------------------------------------------------------------------
//  通过数组索引取得数据指针
//      a_pBase     基地址
//      a_iArray    数组管理结构所在偏移
//      a_iIndex    数组索引
//  失败返回
//      NULL        偏移越界
//  否则返回
//      void *      数据指针
//----------------------------------------------------------------------------
void *toffset_array_ptr(void *a_pBase, size_t a_iArray, int a_iIndex);

//----------------------------------------------------------------------------
//  通过数据偏移，取得数组索引
//      a_pBase     基地址
//      a_iArray    数组管理结构所在偏移
//      a_iOffset   数据偏移
//  成功返回
//      >=0         数组索引        
//  否则返回
//      -1          偏移越界
//      -2          偏移没有对齐 (暗示有错误发生)
//----------------------------------------------------------------------------
int toffset_array_index(void *a_pBase, size_t a_iArray, size_t a_iOffset);

//----------------------------------------------------------------------------
//  得到迭代器头节点偏移
//      a_pBase     基地址
//      a_iArray    数组管理结构所在偏移
//----------------------------------------------------------------------------
size_t toffset_array_begin(void *a_pBase, size_t a_iArray);

//----------------------------------------------------------------------------
//  得到迭代器尾节点偏移
//      a_pBase     基地址
//      a_iArray    数组管理结构所在偏移
//----------------------------------------------------------------------------
size_t toffset_array_end(void *a_pBase, size_t a_iArray);

//----------------------------------------------------------------------------
//  得到迭代器下一个节点偏移
//      a_pBase     基地址
//      a_iArray    数组管理结构所在偏移
//      a_iNode     上一次 next 或者 begin返回的值
//----------------------------------------------------------------------------
size_t toffset_array_next(void *a_pBase, size_t a_iArray, size_t a_iNode);

//----------------------------------------------------------------------------
// THE END
//============================================================================
#endif
