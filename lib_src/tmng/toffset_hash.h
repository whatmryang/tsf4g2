#ifndef _TOFFSET_HASH_H_
#define _TOFFSET_HASH_H_
//============================================================================
// @Id:       $Id: toffset_hash.h 10522 2010-07-20 02:22:08Z tomaswang $
// @Author:   $Author: tomaswang $
// @Date:     $Date:: 2010-07-20 10:22:08 +0800 #$
// @Revision: $Revision: 10522 $
// @HeadURL:  $HeadURL:: https://tc-svn.tencent.com/ied/ied_tsf4g_rep/tsf4g_#$
//----------------------------------------------------------------------------


#include "toffset_array.h"


//============================================================================
//  哈希管理结构
//----------------------------------------------------------------------------
typedef struct
{
    size_t      iBegin;         // 节点存储的开始偏移
    size_t      iEnd;           // 节点存储的结尾偏移
    int         iNodeCount;     // 数据结点的个数
    int         iBucketCount;   // 桶结点的个数
    OffsetArray stNode;         // 数据存储位置
    OffsetArray stBucket;       // 桶存储位置
} OffsetHash;


//============================================================================
//  APIs
//----------------------------------------------------------------------------
//  通过数据结点的个数，计算哈希数据区所需要的空间
//----------------------------------------------------------------------------
size_t toffset_hash_size(int a_iNodeCount);

//----------------------------------------------------------------------------
//  初始化哈希管理结构和哈希数据区
//      a_pBase         基地址
//      a_iHash         哈希管理结构的偏移
//      a_iBegin        哈希数据区开始偏移
//      a_iNodeCount    哈希数据结点的个数
//  成功返回 0
//  失败返回负数
//      -1              a_pBase 为空
//      -2              a_pBase 为 -1
//      -3              a_iNodeCount小于零
//      -4              a_iHash 所在区域与 [a_iBegin, ...) 有重合
//----------------------------------------------------------------------------
int toffset_hash_init(void   *a_pBase,
                      size_t  a_iHash,
                      size_t  a_iBegin,
                      int     a_iNodeCount);

//----------------------------------------------------------------------------
//  添加索引到哈希表中
//      a_pBase         基地址
//      a_iHash         哈希管理结构的偏移
//      a_iIndex        待添加的数据的索引
//      a_pData         待添加的数据起始偏移
//      a_iSize         待添加的数据尺寸
//  成功返回 0
//  失败返回负数
//      -1              a_pBase 为空
//      -2              a_pBase 为 -1
//      -3              索引越界
//      -4              索引被占用
//----------------------------------------------------------------------------
int toffset_hash_add(void       *a_pBase,
                     size_t      a_iHash,
                     int         a_iIndex,
                     const char *a_pData,
                     size_t      a_iSize);

//----------------------------------------------------------------------------
//  在哈希表中查找数据
//      a_pBase         基地址
//      a_iHash         哈希管理结构的偏移
//      a_pData         待查找的数据起始偏移
//      a_iSize         待查找的数据尺寸
//  返回找到第一个数据结点索引
//  失败返回负数
//      -1              没有找到待查找数据
//      -2              a_pBase 为空
//      -3              a_pBase 为 -1
//      -4              返回结果越界 (严重错误，可能管理结构被意外修改了)
//----------------------------------------------------------------------------
int toffset_hash_find(void       *a_pBase,
                      size_t      a_iHash,
                      const char *a_pData,
                      size_t      a_iSize);

//----------------------------------------------------------------------------
//  针对一个桶结点的遍历函数
//      a_pBase         基地址
//      a_iHash         哈希管理结构的偏移
//      a_iPrev         上一个结点的偏移
//  返回下一个结点的索引
//  失败返回负数
//      -1              下一个结点是空结点
//      -2              a_pBase 为空
//      -3              a_pBase 为 -1
//      -4              返回结果越界 (严重错误，可能管理结构被意外修改了)
//      -5              输入的 a_iPrev  越界
//----------------------------------------------------------------------------
int toffset_hash_next(void   *a_pBase,
                      size_t  a_iHash,
                      int     a_iPrev);

//----------------------------------------------------------------------------
//  通过索引删除哈希表中的结点
//      a_pBase         基地址
//      a_iHash         哈希管理结构的偏移
//      a_iIndex        待删除的数据的索引
//  成功返回 0
//  失败返回负数
//      -1              a_pBase 为空
//      -2              a_pBase 为 -1
//      -3              输入的 a_iIndex 越界
//      -4              返回结果越界 (严重错误，可能管理结构被意外修改了)
//      -5              空索引
//----------------------------------------------------------------------------
int toffset_hash_del(void   *a_pBase,
                     size_t  a_iHash,
                     int     a_iIndex);


//----------------------------------------------------------------------------
// THE END
//============================================================================
#endif
